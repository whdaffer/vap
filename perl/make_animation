#!/usr/bin/perl -w
#
# $Id$
#

=pod 

=head1 make_animation

=head2 Usage: make_animation --region region [--time yyyy/mm/dd/hh/mm --delta x.y --filter QS|SW]

Make a SeaWinds VAP animation


=head2 Inputs:

=over 4




=item * REGION: the designation for the region. The only allowed regions at
                the moment are those in the 'desig' tag in the
                $VAP_LIBRARY/auto_movie_defs.dat file. This field is
                *required*

=item * TIME: The time (in vap 'IDL' time format,
              i.e. YYYY/MM/DD/HH/MM) of the animation. The time period used
              to determine which Wind data will be used in the animation is
              [TIME-DELTA,TIME] (see DELTA parameter). 
              DEFAULT = start time of run.

=item * DELTA: the number of hours to go backward from TIME. Wind data
               within this period is used in making the animation. 
               DEFAULT=14 hours.

=item * FILTER: QS for QuikSCAT, SW for SeaWinds on ADEOS . Default is
                search for both types of Wind data.

=back

=cut


 
# Modification Log:
#
# $Log$
# Revision 1.5  2003/01/16 23:47:53  vapdev
# Continuing work
#
# Revision 1.4  2002/08/21 18:29:28  vapdev
# *** empty log message ***
#
# Revision 1.3  2002/08/13 20:14:40  vapdev
# Continuing work and improvement
#
# Revision 1.2  2002/08/12 22:56:51  vapdev
# Continuing work
#
# Revision 1.1  2002/08/09 23:38:44  vapdev
# Initial revision
#
#
#
use strict;
no strict 'refs';
use lib $ENV{VAP_SFTWR_PERL};
use Getopt::Long;
use Animate;
use VapWebsite;
use VapError;

my $usage = <<"EOF";

  Usage: make_animation --region region [--time time --delta delta --filter filter]

EOF


my $starttime =  $^T;
die $usage unless @ARGV;

$|=0; #flush buffers after every print statement. This will keep the
      #mixing of stdout/stderr from Perl and IDL to a minimum.

use vars qw/$region $time $delta $filter/;
my @argnames = qw/region time delta filter /;

my $result=&GetOptions( 'region=s',\$region,
		     'time=s',  \$time,
		     'windfilter|filter|wfilter|wfilt=s', \$filter,
		     'delta=f',\$delta);


my $errorobj = VapError->new;
$errorobj->Report(["=====================================================",
		   "$0: Start processing at ". scalar(localtime(time)),
		   "$0: Input Arguments: \n". join ("\n",@ARGV). "\n"],'INFO');

my @args=();
foreach $main::aa (@argnames){
  if (${$main::aa}) {
    push @args, (uc "$main::aa", ${$main::aa});
  }
}

push @args, ('ERROROBJ', $errorobj);

  # Create the animator object

my $animobj = Animate->new(@args)  || 
  $errorobj->_croak("Can't initialize animation object!",
		    "$0: Error creating animation object");


  # Make the animation 

$animobj->Make_Anim() ||
  $errorobj->_croak("Error making animation!",
		 "$0:Error in Make_Anim");


  # Get the output name
my ($outputfile, $ext)  = $animobj->getOutput;
my $website = VapWebsite->new(FILE => $outputfile,
			      EXT => $ext,
			      ERROROBJ => $errorobj,
			      PROCESSOR_DEFAULTS => $animobj->getDefs);
$errorobj->_croak("Error delivering results\n",
		  "$0: failure delivering product") unless $website->updateWebsite;

my $elapsed_time = time() - $^T;
$errorobj->Report(["\n\nTime: " . scalar(localtime()),
		  "Wall Clock Time: $elapsed_time (secs)\n",
		   "===================== Done ======================="],'INFO');

exit;

