sub gag{

  use Time::Local;

  # Usage: gridded_file=gag(goesnum, sensornum, time, minlon, minlat, maxlon, maxlat);
  #
  # All arguments are required!
  #
  # gag=GetAndGrid : gets the Goes file for the indicated goes
  # satellite ( '9' or '10') and indicated sensor number (1=vis,
  # 2=ir2, 3=ir3, 4=ir4) which is closest to time indicated by 'time'.
  # It Grids the file and places the output in the corresponding
  # subdirectory of $VAP_GOES_GRIDDED_TOPDIR (defaulting to
  # /disk2/vap/goes/gridded_files/ if that environmental variable is
  # undefined) according to the requested file, e.g. gag 10 1 xxx will
  # put the output in $VAP_GOES_GRIDDED_TOPDIR/goes10/vis.  

  # Time is specified as yyyymmddhhmm, all fields must be present.

  my $usage = "gridded_file = gag(satnum, sensornum, time, minlon, minlat, maxlon, maxlat)\n";
  my $gtime=gmtime(time);
  my $satnum = shift || croak $usage;
  my $sensornum = shift || croak $usage;
  my $time = shift || croak $usage;
  my $minlon = shift || croak $usage;
  my $minlat = shift || croak $usage;
  my $maxlon = shift || croak $usage;
  my $maxlat = shift || croak $usage;
  my ($year, $mon, $day, $hour, $min) = ($time =~ /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/);
  croak "Bad time format (should be yyyymmddhhmm)"
    if (! ($year || $mon || $day || $hour || $min));

  $time = timegm( 0, $min, $hour, $day, $mon-1, $year-1900);

  # Read the noaa_area_info file and return a reference to a hash. The
  # has contains information about the file, particularly the `time'
  # of the data in the file, in the form of Unix time.

  my $info = read_area_info();

  #
  # -- Find the file closest to the input time.
  #

  my $mindiff=1.0e30;
  @keep=();
  while (my ($k, $v) = each $info) {
    my $diff=abs($v->{TIME} - $time);
    if ($diff < $mindiff) {
      @keep = ($k, $v->{TIME}, $v->{TIME_STRING}, $v->{DOY});
      $mindiff =$diff;
    }
  }
  if ($mindiff/3600 < 2.0){
    # Get the AREA file.

    # This subroutine will first check to see if the AREA file is
    # already here and fetch it if not. If it is it will then check to
    # see if it's already gridded
    
  } else {
    # No file closer than 2 hours, return nothing;
    return undef
  }
  
}

sub read_area_info{

  # usage: $ref_to_hash = read_area_info( satnum, sensorname)
  # Reads the area_info file for this combination of Goes sat/sensor number.
  # e.g. 10, "ir4" = Goes10, ir4 will be $VAP_GOES_TOP/goes10/ir4/noaa_area_info
  #
  my $usage = "$ref_to_hash = read_area_info( satnum, sensornum)\n";
  my $satnum = shift || croak $usage;
  my $sensornum = shift || croak $usage;

  my $area_info;

  my $local_area_info_file = "$VapUtil::ARCHIVETOP/goes$satnum/$sensorname/noaa_area_info";
  croak "Can't find $local_area_info_file" if (! -e $local_area_info_file);

  open INFO_FILE, "<$local_area_info_file" or croak "Can't open $local_area_info_file: $!\n";

  my $regex = "AREA(\\d{4}):\\s+Data Taken on (\\d{2})/(\\d{2})/(\\d{2}),\\s+at\s+(\\d{2})(\\d{2}) Hours: Long Res = (\\d{1,2}), Lat Res = (\\d{1,2}),\\s+DOY = (\\d{1,3})";

  while (<INFO_FILE>){
    next if /^#/;
    next if /^\s*$/;
    if (/Data Taken on , at/){

      # Sometimes the area info file has a bad entry with no
      # month/day/year fields. Typically this happens for the XY00
      # file, why I don't know, but this one we have to read directly.

      my $areafile = (split /:/)[0];
      my $areafilenum = substr($areafile,4,4);
      $areafile = "$VapUtil::ARCHIVETOP/goes$satnum/$sensorname/$areafile";
      my ($mon, $day, $year, $hh, $mm, $lonres, $doy) = read_area_file_header($areafile);
    } else {
      my ($areafilenum, $mon, $day, 
	  $year, $hh, $mm, $lonres, $latres, $doy) =~ /$regex/;
    }
    my $time = timegm(0, $hh, $mm, $day, $mon-1, $year-1900);
    $area_info->{$areafilenum}->{TIME} = $time;
    $area_info->{$areafilenum}->{TIME_STRING} = "$year/$mon/$day/$hh/$mm";
    $area_info->{$areafilenum}->{DOY} = $doy;
  }
  $area_info;
}
sub read_area_file_header{
  my $usage = "info_array = read_area_file_header( $area_file)\n";
  my $areafile = shift or croak $usage;
  croak "$areafile doesn't exist!\n" unless -e $file;
  croak "$areafile empty!\n" if -z _;
  open AREAFILE,"<$areafile" or croak "Can't open $areafile:$!\n";
  my $hdr;
  read AREAFILE, $hdr, 64*4;
  close AREAFILE;
  my @hdr=unpack "L4", $hdr;
  my $year=int ($hdr[3]/1000);
  my $doy=int ($hdr[3]-$year*1000);
  ($mday, $mon) = doy2mday_mon($doy, $year);
  $hour=int ($hdr[4]/100);
  $min=int ($hdr[4]-$hour*100);
  ($year, $mon, $mday, $hour, $min, 0, 0, $doy);
}
  
}
