#!/usr/bin/perl  -w
#
# $Id$
#
# NAME: cloud_overlay:
#
# PURPOSE: To automatically produce a plot of wind vectors overlaid on
#          cloud imagery, either GOES or GMS 
#
# USAGE: 
#
#  cloud_overlay --region region_name --time time --windpath path_to_wind_files
# 
#  cloud_overlay --time time --satnum 10 --satname GOES --sensornum 4 \
#        --lon -180 --lon -110 --lat 10 --lat 50 --crdecimate 2 \
#          --crdecimate 4 --excluderows "38:42"
#
# For ease windpath may be abbreviated to 'path' or 'wpath'.
#
# MODIFIATION HISTORY
#
# $Log$
# Revision 1.15  2002/05/07 20:50:49  vapdev
# put in '-w' and 'use strict'. Fixed resulting warnings.
#
# Revision 1.14  2001/02/09 18:38:30  vapuser
# Added code for doing gridlines and rain flag.
# Put in more calls to VapErrorMsg
#
# Revision 1.13  2000/05/17 20:42:27  vapuser
# Reworked so that it wouldn't die from lack of cloud data.
#
# Revision 1.12  2000/05/15 23:21:52  vapuser
# Changed some '||'s to '&&' in calls to VapMailErrorMsg. Did some
# other stuff too, but I can't remember what.
#
# Revision 1.11  2000/02/11 16:47:10  vapuser
# Added calls to vap_perl::VarMailErrorMsg
#
#
# Revision 1.10  1999/09/22 20:25:36  vapuser
# Added 'length' and 'delta' processing
#
# Revision 1.9  1999/04/05 18:21:57  vapuser
# took out -d switch
#
# Revision 1.8  1999/04/02 22:29:56  vapuser
# Incorporated GMS5 overlays
#
# Revision 1.7  1998/11/20 19:50:44  vapuser
# updated to handle new 'multi-machine' processing scenario
#
# Revision 1.6  1998/11/04 19:37:58  vapuser
# Added a 'die'
#
# Revision 1.5  1998/10/22 21:37:52  vapuser
# Took out '-d' switch
#
# Revision 1.4  1998/10/17 00:15:52  vapuser
# Added code for CRDecimate,ExcludeCols and Decimate.
#
# Revision 1.3  1998/10/16 21:32:02  vapuser
# removed rcsid and some single quotes.
# changed 'require' to 'use'
#
# Revision 1.2  1998/10/02 20:10:15  vapuser
# added '$' in Id
#
# Revision 1.1  1998/10/02 20:09:40  vapuser
# Initial revision
#
#
#
use strict;
use Getopt::Long;
use File::Copy ;
use lib $ENV{VAP_SFTWR_PERL};
use VapUtil;
use Winds;
use OGoes;
use Gms5;

my $VAP_LIB = $ENV{VAP_LIBRARY} or 
  die "ENV variable VAP_LIBRARY undefined!\nHave you sources .vaprc?\n";
my $VAP_WWW_TOP = $ENV{VAP_WWW_TOP} or 
  die "ENV variable VAP_WWW_TOP undefined!\nHave you sourced .vaprc?\n";
my $usage =  "\nUsage:\n";
$usage .= " cloud_overlay --region REGION_DESIGNATION\n";
$usage .= "  --time TIME_DESIGNATION (yyyy/mm/dd/hh/mm in GMT)\n";
$usage .= "  --windpath PATH_TO_WIND_FILES\n";
$usage .= "  --windfilter WIND_FILTER (i.e. QS or SW or (QS|SW)) (REQUIRED!)\n";
$usage .= "  --satname SATELLITE_NAME (.e.g. 'goes')\n";
$usage .= "  --satnum  SATELLITE_NUMBER (e.g. 10 for goes10)\n";
$usage .= "  --sensornum SENSOR_NUMBER (e.g. 1=vis, 2=ir2, 3=ir3, 4=ir4)\n";
$usage .= "  --lon lonmin lonmax\n";
$usage .= "  --lat latmin latmax \n";
$usage .= "  --crdecimate Col Row\n";
$usage .= "  --excludecols idl-array-submatrix-desg (as string)\n";
$usage .= "  --tellme: Calculates, reports variable values and exits\n\n";
$usage .= "  where: \n";


$usage .= "    WIND_FILTER: (REQUIRED) filter to use for wind data\n";
$usage .= "      Possible filters are: Q for QuikSCAT data\n";
$usage .= "      S for SeaWinds or B for Both\n";
$usage .= "      This is NOT a shell file glob, but a regular expression,\n";
$usage .= "      so input it EXACTLY as shown!\n";
$usage .= "      This switch is *REQUIRED*\n";


$usage .= "    REGION_DESIGNATION is the designation for the \n";

$usage .= "      region as it appears in the _overlay_defs_ file\n";
$usage .= "      See file $VapUtil::VAP_LIBRARY/overlay_defs for the complete list of \n";
$usage .= "      predefined regions. If absent, the program falls over to using the \n";
$usage .= "      information given (or defaulted to) in the combination of the \n";
$usage .= "      satname/satnum/sensornum/lon/lat options.\n";

$usage .= "    TIME_DESIGNATION: the GMT time of the area file to be gridded and \n";
$usage .= "      overlaid. The software will find the one closest to this time \n";
$usage .= "      so long as it isnt more than 2 hours distant. (format: yyyymmddThh:mm)\n";
$usage .= "      The default used depends on the satellite and the region\n";
$usage .= "      If absent, the software will determine time of the file it needs to find\n";
$usage .= "      based on the variables AscTime/DescTime, which are defined in the\n";
$usage .= "      data structure accessed via the 'REGION_DESIGNATION' or are defaulted\n";
$usage .= "      on the basis of the satname/satnum/sensornum variables\n";
$usage .= "      If there is no 'T' in the designation, the string is assumed to be \n";
$usage .= "      of the form hh:mm \n";
$usage .= "      (see --tellme option for a way of finding out what those defaults are\n";

$usage .= "    PATH_TO_WIND_FILES: pretty self explanatory.\n";
$usage .= "      Default given by environmental variable 'VAP_DATA_TOP'\n";

$usage .= "    SATNAME: Name of satellite, Currently only 'goes' works\n";
$usage .= "      Maybe someday we'll be able to use gms (def='GOES')\n";

$usage .= "    SATNUM: Satellite Number (Currently only 10 and 8 work, since \n";
$usage .= "      we can only do 'GOES' satellites (def=10)\n";

$usage .= "    SENSORNUM: 1=vis, 2=ir2, 3=ir3, 4=ir4 (def=4)\n";

$usage .= "    LON: Followed by two values: e.g. '--lon minlon maxlon'\n";
$usage .= "      Defaults are dependent on the satellite\n";

$usage .= "    LAT: Similar to --lon, but in latitude\n";
$usage .= "    CRDECIMATE: the col/row decimation\n";
$usage .= "      Default=[2,2]\n";
$usage .= "    EXCLUDECOLS: See documentation for cloud_overlay.pro for the format\n";
$usage .= "       of this string\n";
$usage .= "    LENGTH: Length fo the Vectors overplotting the cloud data\n";
$usage .= "    RAINFLAG: Determines what to do with Rain Flagged wind data.\n";
$usage .= "       0=ignore, 1=use (default=0)\n";
$usage .= "    RF_ACTION: What to do if rainflag==1\n";
$usage .= "       0=don't plot rainflagged vectors. 1=plot using rf_color\n";
$usage .= "    RF_COLOR: Color to use when plotting rainflagged vectors if rf_action==1\n";
$usage .= "       this color depends on the device environment. It's an index in 8-bit \n";
$usage .= "       color and a true 24 bit color in 24 bit color environment.\n";
$usage .= "    TELLME: Calculates, reports the values for all the variables and exits\n\n";
$usage .= "      Use this option to find out what the defaults are in any given situation\n";

$usage .= "    If one wishes to grid and overlay an arbitrary region not predefined\n";
$usage .= "    in the overlay_defs file, one may use the combination of \n";
$usage .= "    satname/satnum/sensornum/lon/lat to do so. Each will take defaults if\n";
$usage .= "    not present, e.g. satname defaults to 'goes', satnum to '10', \n";
$usage .= "    sensornum to '4' and lon/lat limits take default appropriate to \n";
$usage .= "    whatever satname is. \n\n";



print "=====================================================\n";
print " $0: Beginning run\n";
print scalar(localtime());
print "\n===================================================\n";
die "\n$0 --windfilter FILTER' is now required at the very least\n\n" if !@ARGV;

print "Input Arguments are:\n\t".join("\n\t",@ARGV)."\n";

my ($asctime, $desctime,$nvectors, $crdecimate,$delta, $rainflag,
    $rf_action, $rf_color, $excludecols, @lonlim, @latlim,
    @crdecimate, @excludecols, $result, $region, $area_file_time,
    $time, $lastrec, $fullregionname, $regionname, $msg, $winds_path,
    $windfilter, $satname, $satnum, $sensornum, $length, $help,
    $tellme, $lonlim, $latlim, $testsecs, $type, $overlay_dir,
    $tmpdir);



$result=&GetOptions( 'region=s',\$region,
		     'time=s',  \$area_file_time,
		     'windpath|path|wpath=s', \$winds_path,
		     'windfilter|filter|wfilter|wfilt=s', \$windfilter,
		     'satname=s',\$satname,
		     'satnum=i',\$satnum,
		     'sensornum=i',\$sensornum,
		     'lon=f@',\@lonlim,
		     'lat=f@',\@latlim,
		     'crdecimate=i@',\@crdecimate,
		     'excludecols=s',\$excludecols,
		     'rainflag=i',\$rainflag,
		     'rf_action=i',\$rf_action,
		     'rf_color=i',\$rf_color,
		     'length=i',\$length,
		     'help', \$help,
		     'tellme', \$tellme );

if (!$result){
  vap_perl::VapMailErrorMsg(
       "cloud_overlay: Error parsing options\n" ,
	  "PARSEOPTIONSERROR" ); 
    die "Error parsing options\n"; 
} 
die $usage if $help;
die "\n$0 --windfilter FILTER' is now required at the very least\n\n" unless $windfilter;
die "Only allowed values are --windfilter ^(Q|S|B)\$\n" if $windfilter !~ /^(Q|S|B)$/;



if ($region) {
  # Get the defaults for overlays.
  do { 
    $msg="cloud_overlay: Region $region doesn't exist in OVERLAY DEFAULTS Table!\n";
    $msg.="Execute 'cloud_overlay_regions' to find valid regions\n";
  VapUtil::VapMailErrorMsg( $msg,
		"UNKNOWN REGION") && 
		  die "Region $region doesn't exist in OVERLAY DEFAULTS Table!\n"} 
  if !defined($VapUtil::overlay_defs{ $region }{ Region } );

  $satname     = $VapUtil::overlay_defs{ $region } { CloudData }{ Satellite   };
  $lonlim      = $VapUtil::overlay_defs{ $region } { CloudData }{ LonLim      };
  $latlim      = $VapUtil::overlay_defs{ $region } { CloudData }{ LatLim      };
  $satnum      = $VapUtil::overlay_defs{ $region } { CloudData }{ SatNum      };
  $sensornum   = $VapUtil::overlay_defs{ $region } { CloudData }{ SensorNum   };
  $asctime     = $VapUtil::overlay_defs{ $region } { CloudData }{ AscTime     };
  $desctime    = $VapUtil::overlay_defs{ $region } { CloudData }{ DescTime    };
  $nvectors    = $VapUtil::overlay_defs{ $region } { WVCData   }{ NVectors    };
  $crdecimate  = $VapUtil::overlay_defs{ $region } { WVCData   }{ CRDecimate  };
  $length      = $VapUtil::overlay_defs{ $region } { WVCData   }{ Length      };
  $delta       = $VapUtil::overlay_defs{ $region } { WVCData   }{ Delta       };
  $rainflag    = $VapUtil::overlay_defs{ $region } { WVCData   }{ rainflag    } unless $rainflag;
  $rf_action   = $VapUtil::overlay_defs{ $region } { WVCData   }{ rf_action   } unless $rf_action;
  $rf_color    = $VapUtil::overlay_defs{ $region } { WVCData   }{ rf_color    } unless $rf_color;
  $excludecols = $VapUtil::overlay_defs{ $region } { WVCData   }{ ExcludeCols } 
    unless defined($excludecols);
  
  @lonlim=@{$lonlim} unless @lonlim;
  @latlim=@{$latlim} unless @latlim;
  @crdecimate = @{$crdecimate} unless @crdecimate;
  
  if (!$area_file_time) {
    $asctime  = VapUtil::prepend_yyyymmdd($asctime);
    $desctime = VapUtil::prepend_yyyymmdd($desctime);
    my ($sec,$min,$hour,$mday,$mon,$year)=gmtime($^T-4*3600);
    $time=sprintf("%04d%02d%02dT%02d:%02d",
		  $year+1900,$mon+1,$mday,$hour,$min);
    my @testtimes=( $time, $asctime,$desctime);
    @testtimes = sort @testtimes;
    foreach (@testtimes) {
      last if /$time/;
      $lastrec=$_;
    }
    
    if (!$lastrec)  { 
      # current time (less 1 hour) is earlier than either 
      # asctime or desctime. Take testtimes[2] 
      # (they're sorted, after all ) and subtract 1 day from it.
      $testsecs = VapUtil::vaptime2systime($testtimes[2]);
      $time = VapUtil::systime2vaptime($testsecs-86400);
    } else {
      $time=$lastrec;
    }
  } else {
    $time=$area_file_time;
  }
} else {
  
  $satname = "GOES" unless $satname;
  $satnum = 10 unless $satnum;
  $sensornum = 4 unless $satnum;
  
  if (!$asctime) {
    SWITCH: {
      $asctime="07:00" , last SWITCH if $satnum == 10;
      $asctime="03:00" , last SWITCH if $satnum == 8;
    }
  }
  
  if (!$desctime) {
    SWITCH: {
      $desctime="20:00" , last SWITCH if $satnum == 10;
      $desctime="16:00" , last SWITCH if $satnum == 8;
    }
  }
  
  if (!@lonlim){
    SWITCH: {
      @lonlim=(-175,-115), last SWITCH if $satnum==10;
      @lonlim=(-90,-48), last SWITCH if $satnum==8;
    }
  } elsif ($#lonlim==0) {
    SWITCH: {
      $lonlim[1]=-115, last SWITCH if $satnum==10;
      $lonlim[1]=-48, last SWITCH if $satnum==8;
    }
  }
  
  if (!@latlim){
    SWITCH: {
      @latlim=(25,65), last SWITCH if $satnum==10;
      @latlim=(25,52), last SWITCH if $satnum==8;
    }
  } elsif ($#latlim ==0) {
    SWITCH: {
      $latlim[1] = 65, last SWITCH if $satnum==10;
      $latlim[1] = 52, last SWITCH if $satnum==8;
    }
  }
  
  @crdecimate=(2,2) unless @crdecimate;
  $excludecols="" unless @excludecols;
  
  # Construct the time to be used in finding the correct 
  # goes/gms/whatever file.
  $asctime  = VapUtil::prepend_yyyymmdd($asctime);
  $desctime = VapUtil::prepend_yyyymmdd($desctime);
  my ($sec,$min,$hour,$mday,$mon,$year)=VapUtil::systime2vaptime($^T-3600);
  $time=sprintf("%04d%02d%02dT%02d:%02d",
		$year+1900,$mon,$mday,$hour,$min);
  my @testtimes=( $time, $asctime,$desctime);
  @testtimes = sort @testtimes;
  foreach (@testtimes) {
    last if /$time/;
    $lastrec=$_;
  }
  
  if (!$lastrec)  { 
    # current time (less 1 hour) is earlier than either 
    # asctime or desctime. Take testtimes[2] 
    # (they're sorted, after all ) and subtract 1 day from it.
    $testsecs = VapUtil::vaptime2systime($testtimes[2]);
    $time = VapUtil::systime2vaptime($testsecs);
  } else {
    $time=$lastrec;
  }
  
  
}


$satname =~ tr/a-z/A-Z/;
$fullregionname=join("",split( /_/, $region)) || "NOREGION";
$regionname=join( "", (split( /_/, $region))[3,4] ) || "NR";
$winds_path = $VapUtil::WINDS_DIR unless $winds_path;

print "\nArguments and variables are...\n";
print "\nsatname     = $satname\n";
print "satnum      = $satnum\n" ;
print "sensornum   = $sensornum\n";
print "lon         = @lonlim\n";
print "lat         = @latlim\n" ;
print "asctime     = $asctime\n";
print "desctime    = $desctime\n";
print "time        = $time\n" if $time;
print "crdecimate  = @$crdecimate\n";
print "length      = $length\n";
print "delta       = $delta\n" if $delta;
print "rainflag    = $rainflag\n" if $rainflag;
print "rf_action   = $rf_action\n" if $rf_action;
print "rf_color    = $rf_color\n" if $rf_color;
print "excludecols = $excludecols\n";
print "Taking type = $type\n" if $type;
print "Wind Path   = $winds_path\n";
print "Filter      = $windfilter\n";
print "Output overlay file will have region name $regionname\n";
print "Output HTTP file will have region name $fullregionname\n";

exit if ($tellme);

# Sanity check the arguments: 
@lonlim=VapUtil::fixlonrange( @lonlim );
do {
  VapUtil::VapMailErrorMsg( "cloud_overlay: $satname not in allowed list\n", 
			       "UNKNOWN SATNAME");
  die "$satname not in allowed list\n"; } unless $satname =~ /(GOES|GMS)/;
do {VapUtil::VapMailErrorMsg( "cloud_overaly: $satnum not in allowed list (8,10)\n", 
			"UNKNOWN SATNUM") &&
     die "$satnum not in allowed list (8,10)\n" } unless $satnum =~ /(5|8|10)/;
do {VapUtil::VapMailErrorMsg( "cloud_overaly: $sensornum not in allowed range (1-4)\n", 
			"UNKNOWN SENSORNUM") &&
     die "$sensornum not in allowed range (1-4)\n"}  unless $sensornum =~ /(1|2|3|4)/;
if (abs($lonlim[0]) > 360 || abs($lonlim[1]) > 360){ 
  VapUtil::VapMailErrorMsg("cloud_overlay: Out of range Long Lims\n  (@lonlim)\n", 
			     "LONGLIMS OUTOFRANGE");
  die "Out of range Long Lims\n  (@lonlim)\n";
}

if (abs($latlim[0]) > 90 || abs($latlim[1]) > 90) {
  VapUtil::VapMailErrorMsg("cloud_overlay: Out of range Lat Lims\n  (@latlim)\n", 
			     "LATLIMS OUTOFRANGE");
  die "Out of range Lat Lims\n  (@latlim)\n";
}




  #========================================
  #
  # Start the real processing
  #
  # ========================================


  # create lock file (for IDL session)

my $user=$ENV{'USER'};

$overlay_dir= $overlay_dir || $ENV{VAP_OPS_OVERLAY};
do {
 VapUtil::VapMailErrorMsg( "cloud_overlay: Undefined env vars(VAP_OPS_OVERLAY)\n", 
			    "UNDEFINED_ENV_VARS!");
     die "ENV variable VAP_OPS_OVERLAY is undefined!\n";
 } unless $overlay_dir;



$tmpdir = $tmpdir || $ENV{VAP_OPS_TMPFILES};
do {
 VapUtil::VapMailErrorMsg("$0: Undefined env vars (VAP_OPS_TMPDIR)\n",
			   "UNDEFINED_ENV_VARS!");
   die "ENV variable VAP_OPS_TMPFILES is undefined!\n";
 } unless $tmpdir;



my $lock_file="$tmpdir/$user.cloud_overlay.$$.lock";

do { 
  VapUtil::VapMailErrorMsg("cloud_overlay: Couldn't open $lock_file\n", 
			       "OPENERR <LOCKFILE>");
    die "Couldn't open $lock_file\n"} unless open (LOCK,">$lock_file");
print LOCK "$$\n";
close (LOCK);

my ($minlon, $maxlon, $minlat, $maxlat, $mapLimits, $gridded_file, $wwwfile);

$minlon=$lonlim[0];
$maxlon=$lonlim[1];
$minlat=$latlim[0];
$maxlat=$latlim[1];
$mapLimits ="[ $minlon, $minlat, $maxlon, $maxlat ]";


my @gms5sensornames=('ir1','ir2','ir3','vis');

if ($satname =~ /GMS/) {

  if (!Gms5::GetAllFileLists())
  {
    VapUtil::VapMailErrorMsg(
			      "cloud_overlay:Can't Get all Gms5 archives listings!\n",
			      "GMS5 GETALLFILELISTS");
      die "Can't Get all Gms5 archives listings!\n" ;
    }
  
  my @isec=Gms5::GetIntersection($gms5sensornames[$sensornum-1]);
  if (!$isec[0]) { 
    VapUtil::VapMailErrorMsg("cloud_overlay: Can't get GMS5 intersect\n", 
			      "GMS5 INTERSECT");
      die "Can't get GMS5 intersection\n";
  } 
  my $mindiff=1.e10;
  $gridded_file="";
  my $testsecs=VapUtil::vaptime2systime($time);
  foreach my $datetime (@isec) {
    my $syst=Gms5::Gms5DateTime2SysTime($datetime);
    my $dif = abs($syst-$testsecs) ;
    if ( $dif <= $mindiff ) {
      $gridded_file=$datetime ;
      $mindiff = $dif;
    }
  }
  if ($mindiff > 7200){ 
    $gridded_file="";

      # Don't fail if there isn't a file close enough!
      # But don't bother to FTP all the requisite files either!
      # Still send the error message, though!

    VapUtil::VapMailErrorMsg(
			      "cloud_overlay: No Files closer than 2 hours! <$mindiff>\n",
 			      "GMS5 MINDIFF");
  }  else {
    
    my $T=time();
    if (!Gms5::GetAll($gridded_file)){
      VapUtil::VapMailErrorMsg(
				"cloud_overlay: Can't GetAll for datetime $gridded_file\n", 
				"GMS5 GRIDDEDFILE");
	die "Can't GetAll for datetime $gridded_file\n";
    }
    $T=time()-$T;
    print "GMS5::GetAll took $T seconds \n";
  }

} else {
  # $gridded_file="";
  # It's a GOES file 
  # Supposedly we can now get and grid the AREA file 


  # Supposedly we can now get and grid the AREA file 
  my $T=time();
  print "$0: Calling GAG with arguments\n\tsatnum:$satnum\n\tsensornum:$sensornum";
  print "\n\ttime:$time\n\tminlon:$minlon\n\tminlat:$minlat";
  print "\n\tmaxlon:$maxlon\n\tmaxlat:$maxlat\n";
#  $gridded_file = VapUtil::gag( $satnum, $sensornum, $time, 
#				 $minlon, $minlat, $maxlon, $maxlat );

  # Initialize the Goes object.
  my $goes = OGoes->new(SAT => $satnum,
		       SENSORNUM => $sensornum,
		       LIMITS => [$lonlim[0], $latlim[0], $lonlim[1], $latlim[1]],
		       TIME => VapUtil::vaptime2idltime($time),
		       ABSFLAG => 1);
  if ($goes) {
    # Call GAG.
    $gridded_file = $goes->gag()
  } else {
    warn "Can't create goes object!\nContinuing with null gridfile";
  }
  $T=time()-$T;

  print "GAG took $T seconds\n";

  # New mode. Don't fail if the gridding didn't work. Just continue
  # and let it plot the vectors anyway.
}



# The IDL routines like time as yyyy/mm/dd/hh/mm. 
# So, construct this time string.

my ($idl_time_string, $idl_tmp_file, $exe_str);
$idl_time_string=VapUtil::vaptime2idltime($time);
$idl_tmp_file="$tmpdir/$0_idl_called_by_perl_$$.pro";
print "Writing IDL tmp file $idl_tmp_file\n";

open(IDLFILE,">$idl_tmp_file") || 
    do {VapUtil::VapMailErrorMsg(
				  "Cloud_overlay: Couldn't open $idl_tmp_file\n",
				  "BAD IDL TMPFILE OPEN") && 
				  die "Couldn't open $idl_tmp_file\n"};
my $idl_windfilter;
$idl_windfilter = "QS*" if $windfilter =~ /^Q/;
$idl_windfilter = "SW*" if $windfilter =~ /^S/;
$idl_windfilter = "{QS,SW}*" if $windfilter =~ /^B/;

$exe_str = "cloud_overlay,\'$gridded_file\',\'$idl_windfilter\',\'$idl_time_string\'";
$exe_str .= ",$delta,wpath = \'$winds_path\'";
$exe_str .= ",lockfile=\'$lock_file\',length=$length";
$exe_str .= ",CRDecimate=[".join(",",@$crdecimate)."]";
$exe_str .= ",ExcludeCols=\'$excludecols\'";
$exe_str .= ",rainflag=$rainflag" if $rainflag;
$exe_str .= ",rf_action=$rf_action" if $rf_action;
$exe_str .= ",rf_color=$rf_color" if $rf_color;
$exe_str .= ",mapLimits=$mapLimits";
$exe_str .= ",/gridlines";
$exe_str .= ",gmsType=\'$gms5sensornames[$sensornum-1]\'" if ($satname =~ /GMS/);
  
print IDLFILE "$exe_str\nexit\n" || 
   {VapUtil::VapMailErrorMsg(
       "cloud_overlay: Can't write to idl tmp file $idl_tmp_file\n",
       "BAD WRITE TO IDL TMPFILE") && 
	   die "Can't write to idl tmp file $idl_tmp_file\n"};
close IDLFILE;

print "wrote following to idl_tmp_file\n  $exe_str\n";

$exe_str=$VapUtil::IDLEXE." ".$idl_tmp_file;
my $r=system( $exe_str )/256;

if ($r != 0){
  VapUtil::VapMailErrorMsg("cloud_overlay: Error in IDL\n",
			    "ERROR CALLING IDL");
    die " Error in IDL\n";
}

  # check for errors

  VapUtil::CheckForErrors $lock_file;

  # goes_overlay gives the output gif file a name based on the input
  # grid file name. Get that name and rename the file to the standard
  # 'pac_overlay_$type.gif'

my $file_with_output_name="auto_cloud_overlay_output_file.$$";



my $www_ouput_filename = VapUtil::MoveOverlayOutput($overlay_dir, 
						    $file_with_output_name, $
						    $fullregionname,
						    $regionname);

  # go to where the index.html is

do {VapUtil::VapMailErrorMsg(
          "cloud_overlay: Couldn't go to $VAP_WWW_TOP\n",
			      "CD ERROR WWW TOP DIR");
	die "Couldn't CD to $VAP_WWW_TOP\n";} unless chdir $VAP_WWW_TOP;

  # update the dates in that file
print "Updating index.html\n";
VapUtil::date_index();

  # make sure it's readible.
do {VapUtil::VapMailErrorMsg("cloud_overlay: Couldn't chmod index.html to 0644\n",
			      "INDEX.HTML CHMOD ERROR");
  die "Couldn't chmod index.html to 0644\n"} unless chmod(0644,"index.html");
my $tottime=time()-$^T;

print "$0: Total Time: $tottime\n";
print "=================================================\n" ;
print "$0:\n Ending run\n";
print scalar(localtime());
print "\n================================================\n";

exit;

