#!/usr/bin/perl
#
# TS_OVERLAY:
#
# Author: W.H. Daffer
# M/S:    300/319
# vox:    4-0161
#
#   Main level routine to create overlays on any tropical
#   Depressions/Storms/Hurricanes/Cyclones/Typhoons that may be out
#   there.  
#
# Usage: % ts_overlay --region REGION_NAME  (no default!)
#                     [--time yyyy/mm/dd/hh/mm/ss 
#                       (default=current time-delta hours)
#                     --storm_delta delta_time_in_hours (default=6 hrs.)
#                     --wind_delta  detal_time_in_hours (default=3 hrs.)
#                     --help (emit a message)
#
#        where REGION_NAME (which is required) is one of:
#
#                GOESEAST (i.e. goes 8)
#                GOESWEST (i.e. goes 10)
#                GMS5
#
#        and the TIME is specified as indicated. 
#
#
#        If the time variable is omitted, it will default to the
#        current time - delta_time hours.
#
#
#
#        The two `delta' times determine which cloud/wind and storm
#        data is chosen. The time range inside of which storm data is
#        chosen is time-storm_delta and the time range for the wind
#        data is time +/- wind_delta. This routine is meant to be run
#        most frequently with `time' and the two `delta' times taking
#        the defaults. Under these assumptions, the `time' will be 'now
#        - 1.5 hrs', the timerange for the wind data will be `now +/-
#        1.5 hours', the cloud data will be that closest to `now - 1.5
#        hrs.' and the time range for the storm data will be `now -1.5
#        hrs. - 6 hrs.'
#
#
#
#
# N.B. At the moment, the Goes overlays will only use northern
# hemisphere data. This means that Southern Hemisphere storms will
# only be overlaid if they are in the GMS5 region! Eventually we'll
# start using the southern stuff too, but it will take a while to adapt
# our software to Paul Chang's archive structure.
#
#
# Method:
#
#

#  This routine takes the `time' (or current-1.5 hours, if none is
#  input), fetch the tropical storm listing from
#  http://www.solar.ifa.hawaii.edu/Tropical/tropical.html and finds
#  the storms in the indicated region that are within +/- `delta' of
#  `time.'  Usually this should only be one instance of each storm in
#  a particular region.  # #
#
#  The routine then determines which cloud data to get and does so
#  (gridding the Goes data, if need be) and calls whichever IDL
#  routine is necessary with the proper argumentation to do the
#  overlay.
#
#  After this, it copies the resultant file to the appropriate WWW
#  directory and updates the appropriate web page so it contains the
#  newly created overlay.
#
#  The most common method of use will be to start this routine from a
#  cronjob whose times is chose in such a way that the probability is
#  high that the QuikSCAT and cloud data will be available given the
#  time of the cronjob.
#
# $Id$
#
# Modifications:
#
# $Log$
# Revision 1.1  2001/11/30 00:15:55  vapuser
# Initial revision
#
#
#
#


use lib "/usr/people/vapuser/perl";
use Getopt::Long;
use File::Copy;
use Time::Local;
use Cwd;
use Qs;
use VapUtil;
use VapWWW;
use Gms5;
use TS;
use Goes;

$curdir=getcwd();

@region=
$usage = "\nusage: % ts_overlay --region REGION [--time TIME --delta DELTA_TIME --help]\n\n";
$usage .= " where:\n\n";
$usage .= "   REGION =  (*required*)\n";
$usage .= "     is the generic region of the world you want to check \n";
$usage .= "     for storms. GMS5 has 70<=longitude<=190 and -60<=latitude<=60\n";
$usage .= "     GOESEAST is roughly the Northern Atlantic and \n";
$usage .= "     GOESWEST is roughly the North Eastern Pacific, about as far west\n";
$usage .= "     as the Hawaiian Islands.\n\n";
$usage .= "   TIME has the format YYYY/MM/DD/HH/MM\n";
$usage .= "      (defaults to current time (in UT)- wind_delta_time)\n";
$usage .= "      and should be input as UT!\n";
$usage .= "     and\n\n";
$usage .= "   STORM_DELTA_TIME is in fractional hours.\n";
$usage .= "      (defaults to 6)\n\n";
$usage .= "   WIND_DELTA_TIME is in factional hours.\n";
$usage .= "      (defaults to 4)\n\n";
$usage .= "   HELP : emits this message\n";
$usage .= " The time range defined by TIME-STORM_DELTA_TIME defines\n";
$usage .= " which storms will be found.\n";
$usage .= " The time range defined by TIME-WIND_DELTA_TIME defines\n";
$usage .= " which wind files will be found.\n";
$usage .= " The cloud data closest to TIME will be used in the overlay.\n\n";


die $usage if !@ARGV;
  ## Parse the input arguments!
$result=&GetOptions( 'region=s',\$region,
		    'time=s',  \$time,
		    'storm_delta=f',\$storm_delta,
		    'wind_delta=f',\$wind_delta,
		    'help',\$help);

$save_output_autoflush=$|;

$|=1;
  ## stop processing if they asked for 
  ## help or there was a problem!
die $usage if $help || !$result;


print "===========================================================================\n";
print "  Start time: ".localtime($^T)."\n";

%stormtypes = ( '???' => "Unknown", 
	       'DEP' => "Tropical Depression",
	       'STO' => "Tropical Storm",
	       'CYL' => "Cyclone",
	       'HUR' => "Hurricane",
	       'TYP' => "Typhoon" );

@regions=getSatellites();
$regions = join ",", @regions;
$regions_re=join "|",@regions;
$regions_re="^($regions_re)\$";

die  "Unknown Region! Must be one of [$regions]\n"  
    if ($region !~ /$regions_re/);

print "Will search for storms in the $region region\n";
$storm_delta = 8 if !$storm_delta;
$wind_delta = 4 if !$wind_delta;
print "Using a Storm delta of $storm_delta hours\n";
print "Using a Wind delta of $wind_delta hours\n";

if (!$time) {
  $now=SysNow();
  $time = $now - $wind_delta*3600.;
  $idltime=systime2idltime($time);
  print "Will use $idltime (".gmtime($now)." (UT) - $wind_delta hours) as the time\n"
} else {
  print "Will use $time as the time for out search (I hope you know this should be in GMT!)\n";
  $idltime=$time;
  $time=idltime2systime($time);
}

$startstormtime=systime2decyear($time-$storm_delta*3600);
$endstormtime=systime2decyear($time);

$startstormidltime=systime2idltime($time-$storm_delta*3600);
$endstormidltime=systime2idltime($time);

$startwindidltime=systime2idltime($time-$wind_delta*3600);
$endwindidltime=systime2idltime($time+$wind_delta*3600);

$time=systime2decyear($time);

print "Time searched for storms will be\n   $startstormidltime to\n   $endstormidltime\n";
print "Time searched for wind data will be\n  $startwindidltime to\n  $endwindidltime\n";

@contents_of_file = getTropicalStormsDatafile();

%storms=parseTropicalStorms(\@contents_of_file, "DEP", 
			    $startstormtime, $endstormtime);

%hash=getClosestBySatellite(\%storms,$region,$time);

@kk=keys %hash;
$k=$#kk+1;
print "Found $k storms for region $region\n";
foreach $k (keys %hash) {

  
  @match=@{$hash{$k}{match_data}};
  print "\n\n --- Storm $k: $match[1], $match[2], $match[3], $match[4], $match[5], $match[6], $match[8]\n\n" if (@match) ;

  $stormtime=$match[4];
  $type=$match[5];
  $stormtype = $stormtypes{$type};
  $type = 'UNK' if /\?+/;

  $subtitle = 
    "Location: Lon: $match[1], Lat: $match[2], Time: $stormtime, Sus. Winds: $match[6] (kts)";

  $stormname = $k;

  ($path,$modidltime,@windfiles)= 
    Qs::FindClosestInTimeAndDistance($match[1], 
				     $match[2], 
				     $stormtime,$wind_delta,5, 1);


  $modidltime = $idltime if (!$modidltime);
  print "Time of closest wind data (modidltime): $modidltime\n";
  @tmp=split("/",$modidltime);
  $idltimestring=join("",@tmp[0 .. 4]);

  $outputname="$region-$type-$k-$idltimestring.jpeg";

  @maplimits=($match[1]-10,$match[2]-10,$match[1]+10,$match[2]+10);
  $maplimits="[".join(",",@maplimits)."]";
    
  if ($region eq 'GMS5') {
    ($gms5datetime, $gms5mindiff)= Gms5::GetClosest( $modidltime );
    if ($gms5mindiff) {
      if (abs($gms5mindiff) < $wind_delta*3600) {
	$test=Gms5::GetAll($gms5datetime);
	$gms5datetime = undef if !$test;

      } else {
	$gms5datetime = undef;
      }
    }    
    die "ERROR: Both GMS cloud data and Qscat data are missing!\n" 
	if (!($gms5datetime || @windfiles) );

    print "\n  GMS5 time: $gms5datetime\n" if $gms5datetime;
    print "  Wind Files time: $idltime +/- $wind_delta hours\n";
    print "  For a stormtime of $stormtime\n\n";

    $idltmpfilestr = "tropical_storms_overlay,\'$gms5datetime\',gmstype=\'ir1\'";

  } elsif ($region eq 'GOESWEST') {
    $t0=time();
    print "Starting GAG at ".localtime($t0)."\n";
    $goesfile=gag("GOESWEST", "4", $modidltime, 0, @maplimits );
    print "Finished GAG at ".localtime(time)."\n";
    $t0 = time()-$t0;
    print "GAG took $t0 seconds\n";
    die "Both GoesWest data and QuikSCAT data is missing!\n" 
	if (!($goesfile || @windfiles));
    print "Goesfile: $goesfile\n";
    $idltmpfilestr="tropical_storms_overlay,\'$goesfile\'";
  } elsif ($region eq 'GOESEAST') {

    $t0=time();
	print "Starting GAG at ".localtime($t0)."\n";

    $goesfile=gag("GOESEAST", "4", $modidltime, 0, @maplimits );
    print "Finished GAG at ".localtime(time)."\n";
    $t0 = time()-$t0;
    print "GAG took $t0 seconds\n";

    die "Both GoesEast data and QuikSCAT data is missing!\n" 
	if (!($goesfile || @windfiles));
    print "Goesfile: $goesfile\n";
    $idltmpfilestr="tropical_storms_overlay,\'$goesfile\'";
  } else {
    die "How the heck did I get here?\n";
  }

  $idltmpfilestr .= ",crd=[0,0],len=1,maplimits=maplimits";
  $idltmpfilestr .= ",outfile=outfile";

  if (@windfiles) {
    $path .= "/" if $path !~ /.*\/$/;
    $str="\n";
    $str .= join("\n", @windfiles);
    $str .= "\n";
    print "Windfiles to be used: $str";
    $windfiles="\'$path\' + [\'$windfiles[0]\'";

    for ($i=1;$i<=$#windfiles;$i++){
      $windfiles .= ",\'$windfiles[$i]\'";
    }
    $windfiles .= "]";
    $idltmpfilestr .= ",windfiles=windfiles";
    print "Wind files: $windfiles\n";
  }

  $oplotstring=makeIDLOplotString($match[1], $match[2]);
  $idltmpfilestr .= ",oplot=oplot";

  
    ## Open the lockfile and put the current unix time in there.  This
    ## is the only way we have of gathering output from the IDL
    ## process. We also use it to communcate that this run is
    ## 'non-interactive' in the sense that IDL is being started by the
    ## perl script. This sort of 'non-interactivty' applies both when
    ## the script is called by the user as well as when it is called
    ## by cron, an ambiguity which I haven't been able to eliminate.

  $time=timegm(gmtime(time));
  chdir $TS::TS_OVERLAY_DIR  || die "Can't CD to $TS::TS_OVERLAY_DIR\n";
  $lockfile="ts_cronjob.$time.lock";
  open FILE,">$lockfile" || die "Can't open $lockfile\n";
  print FILE $time;
  close FILE;
  
  $idltmpfilestr .= ",lockfile=lockfile, title=title, subtitle=subtitle\n";
  $idltmpfilestr .= "exit\n";
  

    ## Open the tmp file that will be executed by IDL and write the
    ## command string to it 
  $tmpfile="ts_tmpfile.$time.pro";
  print "Tmpfile: $tmpfile\n";

  open TMPFILE, ">$tmpfile" || 
      die "Can't open IDL TMPFILE\n";
  print TMPFILE "title=\'$stormtype $stormname :\'\n";
  print TMPFILE "subtitle=\'$subtitle\'\n";
  print TMPFILE "maplimits=$maplimits\n";
  print TMPFILE "windfiles=$windfiles\n" if $windfiles;
  print TMPFILE "oplot=$oplotstring\n";
  print TMPFILE "outfile=\'$outputname\'\n";
  print TMPFILE  "lockfile=\'$lockfile\'\n";   

  print TMPFILE $idltmpfilestr;
  close TMPFILE;

  
  $r=system( "$Qs::IDLEXE  $tmpfile")/256;
  die "Bad return from system( $IDLEXE $tmpfile)\n" if $r != 0;
  
  unlink $tmpfile || warn "Couldn't unlink($tmpfile)\n";
  open FILE, "<$lockfile" || die "Can't reopen $lockfile\n";
  while (<FILE>){
    warn $_ && $errcnt++ if /.*ERROR.*/;
  }
  close FILE;

  die "Found $errcnt Errors -- Exiting\n" if $errcnt;
  die "Can't find output file $outputname\n" if !-e $outputname;

  unlink $lockfile || warn "Couldn't unlink($lockfile)\n";

  $newname="$Qs::VAP_WWW_TOP/images/storms/$outputname";
  $relative_name="/images/storms/$outputname";

  copy $outputname, $newname || 
      die "Can't copy\n $outputname to $newname\n";
  copy "$outputname.TN", "$newname.TN" || 
      die "Can't copy\n $outputname.TN to $newname.TN\n";
 
  unlink $outputname || die "Can't unlink $outputname\n";
  unlink "$outputname.TN" || die "Can't unlink $outputname.TN\n";

  rewriteStormsPage $relative_name || die "Error rewriting storms.html\n";
}

$now=time();
$elapsed = $now-$^T;
print "End time: ".localtime($now)."\n";
print "Elapsed time: $elapsed (sec)\n";
print "Done!\n";
print "================================================================\n";
$| = $save_output_autoflush;
exit;





