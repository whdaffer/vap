#!/usr/bin/perl -w
#
# $Id$
#
# Modifications:
#
#


=pod

=head1 make_ts_overlay 



=head2 USAGE

          make_ts_overlay --region REGION 
                              --windfilter Q|S
                             --time yyyy/mm/dd/hh/mm 
                              --wind_delta n
                              --storm_delta m


=over 4

=item * REGION : The region in which we'll search for storms.

                 currently, those regions are: GMS5, GOESEAST and GOESWEST
	         GMS5 has 70<=longitude<=190 and -60<=latitude<=60
		 GOESEAST is roughly the Northern Atlantic and 
		 GOESWEST is roughly the North Eastern Pacific, 
                 about as far west as the Hawaiian Islands.

                 No Default. If not passed the object will die.

=item * WINDFILTER: Which data to make the overlay with. Q for
                    QuikSCAT or S for SeaWinds. NO DEFAULT!

=item *	TIME: has the format YYYY/MM/DD/HH/MM
	   (defaults to current time (in UT)- wind_delta_time)
	   and should be input as UT!

=item *	STORM_DELTA_TIME is in fractional hours.
	   (defaults to 8)

=item *	WIND_DELTA_TIME is in factional hours.
	   (defaults to 4)

=item * ABSFLAG: 0|1, if 1, time range is TIME +/- `delta'/2
                 (whichever delta we're talking about) Otherwise it's
                 TIME-`delta'

=item *	HELP : emits this message

=back

The cloud data closest to TIME will be used in the overlay.


=cut

use strict;
no strict 'refs';
use OTS; # Object oriented Tropical Storms Overlay module
use Getopt::Long;
use VapWebsite;

my $starttime = $^T;
my $starttimeasstring = scalar(localtime($^T));
$|=0;


use vars qw/$result $region $time $windfilter $help 
	   $stormdelta $winddelta/;

my @argnames = qw/region time windfilter help 
		  stormdelta winddelta/;

my $usage = <<EOF;

 Usage: $0 --region region --windfilter 'Q|S' 
             [--time yyyy/mm/dd/hh/mm 
              --stormdelta x.y
              --winddelta  x.y
              --help ]

EOF


if (!@ARGV) {
  print $usage;
  exit;
}

$result=&GetOptions( 'region=s',\$region,
		     'time=s',  \$time,
		     'windfilter|filter|wfilter|wfilt=s', \$windfilter,
		     'stormdelta=f',\$stormdelta,
		     'winddelta=f',\$winddelta,
		     'help', \$help );


if ($help) {
  print $usage ;
  exit;
}

my @args = ();
foreach $main::aa (@argnames){
  if (${$main::aa}) {
    push @args, (uc "$main::aa", ${$main::aa});
  }
}
my $errorobj = VapError->new;
$errorobj->Report(["=====================================================",
		   "$0: Start processing at ". scalar(localtime(time)),
		   "$0: Input Arguments: \n". join ("\n",@ARGV). "\n"],'INFO');

push @args, ('ERROROBJ', $errorobj);

  # Create the Tropical Storm overlay object.

my $obj = OTS->new(@args);
my @msg = ();
my @storms = $obj->stormsFound();
foreach (@storms){
  my $product = $obj->makeOverlay($_);
  $errorobj->_croak("makeOverlay failed: null product name!\n",
		    "$0: makeOverlay: null product") unless $product;

  my $website=VapWebsite->new(FILE=>$product,
			   PROCESSOR_DEFAULTS=>$obj->getDefs,
			   ERROROBJ=>$errorobj) || 
	$errorobj->_croak("Error creating VapWebsite object!\n",
			  "$0: failure creating VapWebsite");
  $errorobj->_croak("Error delivering results\n",
		  "$0: failure delivering product") unless 
		    $website->updateWebsite;
  $website = undef;

}

my $elapsed_time = time() - $^T;
$errorobj->Report(["\n\nTime: " . scalar(localtime()),
		  "Wall Clock Time: $elapsed_time (secs)\n",
		   "===================== Done ======================="],'INFO');

exit;
